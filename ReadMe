# Randomized Quicksort Implementation

This project implements the Randomized Quicksort algorithm in Python. Randomized Quicksort is a variation of the classic Quicksort algorithm that selects a pivot element randomly to improve efficiency and reduce the likelihood of worst-case performance. The project includes test cases for various types of input arrays, demonstrating the algorithmâ€™s adaptability across different data distributions.

## Code Overview

### Functions

- **`randomized_quicksort(arr, low, high)`**: The main function that sorts an array `arr` between indices `low` and `high` using the Randomized Quicksort algorithm. This function recursively calls itself on subarrays created by the randomized partition.

- **`randomized_partition(arr, low, high)`**: Selects a random pivot element between `low` and `high` indices, swaps it with the last element, and partitions the array.

- **`partition(arr, low, high)`**: Reorders the array based on the pivot, moving elements less than the pivot to the left and greater elements to the right, returning the pivot's final position.

### Example Arrays

The code includes test cases with various array types to validate the Randomized Quicksort implementation:

- **Randomly generated array**: A typical case simulating average input distribution.
- **Already sorted array**: Tests how the algorithm performs on sorted data.
- **Reverse-sorted array**: Checks the behavior with a descending order input.
- **Array with repeated elements**: Evaluates handling of arrays containing duplicates.

### Sample Output

The program outputs the sorted results for each example array.

```python
import random

# Example arrays to test the function
random_array = [random.randint(0, 100) for _ in range(10)]
sorted_array = list(range(10))
reverse_sorted_array = list(range(10, 0, -1))
repeated_elements_array = [5] * 10

# Define low and high indices
low = 0
high = len(random_array) - 1

# Test with each example array
print("Original Random Array:", random_array)
randomized_quicksort(random_array, low, high)
print("Sorted Random Array:", random_array)

print("\nOriginal Sorted Array:", sorted_array)
randomized_quicksort(sorted_array, low, len(sorted_array) - 1)
print("Sorted Sorted Array:", sorted_array)

print("\nOriginal Reverse-Sorted Array:", reverse_sorted_array)

randomized_quicksort(reverse_sorted_array, low, len(reverse_sorted_array) - 1)
print("Sorted Reverse-Sorted Array:", reverse_sorted_array)

print("\nOriginal Repeated Elements Array:", repeated_elements_array)
randomized_quicksort(repeated_elements_array, low, len(repeated_elements_array) - 1)
print("Sorted Repeated Elements Array:", repeated_elements_array)

# Heapsort Implementation

This project implements the Heapsort algorithm in Python, a popular in-place sorting algorithm that builds a max-heap to efficiently sort elements in \( O(n \log n) \) time. This repository includes the Heapsort algorithm, along with test cases to validate its functionality on various types of arrays.

## Code Overview

### Functions

- **`heapify(arr, n, i)`**: A helper function that maintains the max-heap property by "sifting down" the element at index `i` within the array `arr`, of size `n`. If the element is smaller than its children, it swaps with the largest child and continues the process recursively.
  
- **`heapsort(arr)`**: The main function that sorts an array `arr` using the Heapsort algorithm. It builds a max-heap for the array, then repeatedly swaps the root (largest element) with the last element and reduces the heap size, maintaining the max-heap property after each swap.

### Test Cases

The code includes a `test_heapsort()` function with test cases to verify the correctness of the Heapsort implementation. It covers various input scenarios:
- **Unsorted array**: Typical case with random elements.
- **Array with repeated elements**: Ensures the algorithm handles duplicates correctly.
- **Empty array**: Tests how the algorithm handles no elements.
- **Single element array**: Verifies handling of minimal input.

#### Example Code

```python
# Test cases
def test_heapsort():
    test_cases = [
        {"input": [4, 10, 3, 5, 1], "expected": [1, 3, 4, 5, 10]},
        {"input": [12, 11, 13, 5, 6, 7], "expected": [5, 6, 7, 11, 12, 13]},
        {"input": [4, 4, 4, 4], "expected": [4, 4, 4, 4]},
        {"input": [], "expected": []},
        {"input": [5], "expected": [5]},
    ]
    
    for i, case in enumerate(test_cases):
        arr = case["input"].copy()
        heapsort(arr)
        assert arr == case["expected"], f"Test case {i + 1} failed: expected {case['expected']}, got {arr}"
        print(f"Test case {i + 1} passed.")

# Run Heapsort tests
test_heapsort()
